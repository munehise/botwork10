//@version=5
strategy("Mega-MA Strategy (Грязный Питт) + Multi-MACD Zero-Line Filters", overlay=true, initial_capital=10000, max_bars_back=500)

// === Включатели/выключатели визуала ===
showLongEntry      = input.bool(true,  "Show Long Entry")
showShortEntry     = input.bool(true,  "Show Short Entry")
showLongStop       = input.bool(true,  "Show Long Stop")
showShortStop      = input.bool(true,  "Show Short Stop")
showLongBE         = input.bool(true,  "Show Long BE Trigger")
showShortBE        = input.bool(true,  "Show Short BE Trigger")

showLongP1         = input.bool(true,  "Show Long Pyramid 1")
showLongP2         = input.bool(true,  "Show Long Pyramid 2")
showLongP3         = input.bool(true,  "Show Long Pyramid 3")
showLongP4         = input.bool(true,  "Show Long Pyramid 4")
showLongP5         = input.bool(true,  "Show Long Pyramid 5")
showLongP6         = input.bool(true,  "Show Long Pyramid 6")
showLongP7         = input.bool(true,  "Show Long Pyramid 7")
showLongP8         = input.bool(true,  "Show Long Pyramid 8")
showLongP9         = input.bool(true,  "Show Long Pyramid 9")
showLongP10        = input.bool(true,  "Show Long Pyramid 10")

showShortP1        = input.bool(true,  "Show Short Pyramid 1")
showShortP2        = input.bool(true,  "Show Short Pyramid 2")
showShortP3        = input.bool(true,  "Show Short Pyramid 3")
showShortP4        = input.bool(true,  "Show Short Pyramid 4")
showShortP5        = input.bool(true,  "Show Short Pyramid 5")
showShortP6        = input.bool(true,  "Show Short Pyramid 6")
showShortP7        = input.bool(true,  "Show Short Pyramid 7")
showShortP8        = input.bool(true,  "Show Short Pyramid 8")
showShortP9        = input.bool(true,  "Show Short Pyramid 9")
showShortP10       = input.bool(true,  "Show Short Pyramid 10")

showAvgBE          = input.bool(true,  "Show Average Breakeven Line")

// === Настройки размеров позиций (% от equity) ===
positionGroup = "=== Настройки размеров позиций (в % от equity) ==="
baseLongQty     = input.float(10.0, "Base Long % Qty", minval=0.1, step=0.1, group=positionGroup)
baseShortQty    = input.float(10.0, "Base Short % Qty", minval=0.1, step=0.1, group=positionGroup)

longP1Qty = input.float(10.0, "Long P1 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP2Qty = input.float(10.0, "Long P2 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP3Qty = input.float(10.0, "Long P3 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP4Qty = input.float(10.0, "Long P4 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP5Qty = input.float(10.0, "Long P5 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP6Qty = input.float(10.0, "Long P6 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP7Qty = input.float(10.0, "Long P7 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP8Qty = input.float(10.0, "Long P8 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP9Qty = input.float(10.0, "Long P9 % Qty", minval=0.1, step=0.1, group=positionGroup)
longP10Qty = input.float(10.0, "Long P10 % Qty", minval=0.1, step=0.1, group=positionGroup)

shortP1Qty = input.float(10.0, "Short P1 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP2Qty = input.float(10.0, "Short P2 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP3Qty = input.float(10.0, "Short P3 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP4Qty = input.float(10.0, "Short P4 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP5Qty = input.float(10.0, "Short P5 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP6Qty = input.float(10.0, "Short P6 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP7Qty = input.float(10.0, "Short P7 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP8Qty = input.float(10.0, "Short P8 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP9Qty = input.float(10.0, "Short P9 % Qty", minval=0.1, step=0.1, group=positionGroup)
shortP10Qty = input.float(10.0, "Short P10 % Qty", minval=0.1, step=0.1, group=positionGroup)

// === Настройки трейлинга ===
trailingGroup = "=== Настройки трейлинга ==="
useTrailingStop = input.bool(true, "Use Trailing Stop on Avg BE")
trailing_offset_percent = input.float(0.1, "Trailing Offset % from Avg BE", minval=0, step=0.01, group=trailingGroup) / 100

// === Вспомогательные функции ===
tema(src, len) =>
    e1 = ta.ema(src, len)
    e2 = ta.ema(e1, len)
    e3 = ta.ema(e2, len)
    3 * e1 - 3 * e2 + e3

hma(src, len) =>
    n1 = math.max(1, math.round(len / 2))
    n2 = math.max(1, math.round(math.sqrt(len)))
    w1 = ta.wma(src, n1)
    w2 = ta.wma(src, len)
    ta.wma(2 * w1 - w2, n2)

ma(src, len, mtype) =>
    switch mtype
        "EMA" => ta.ema(src, len)
        "SMA" => ta.sma(src, len)
        "WMA" => ta.wma(src, len)
        "RMA" => ta.rma(src, len)
        "HMA" => hma(src, len)
        "VWMA" => ta.vwma(src, len)
        "TEMA" => tema(src, len)
        => ta.sma(src, len)

// === ГРУППА 1 ===
group1_maType_fast = input.string("EMA", "Group 1 Fast MA Type", options=["EMA","SMA","WMA","RMA","HMA","VWMA","TEMA"])
group1_maType_slow = input.string("SMA", "Group 1 Slow MA Type", options=["EMA","SMA","WMA","RMA","HMA","VWMA","TEMA"])
group1_src_fast = input.source(close, "Group 1 Fast Source")
group1_src_slow = input.source(close, "Group 1 Slow Source")
group1_len_fast = input.int(5, "Group 1 Fast MA Length", minval=1)
group1_len_slow = input.int(34, "Group 1 Slow MA Length", minval=1)

// === ГРУППА 2 ===
group2_maType_fast = input.string("WMA", "Group 2 Fast MA Type", options=["EMA","SMA","WMA","RMA","HMA","VWMA","TEMA"])
group2_maType_slow = input.string("EMA", "Group 2 Slow MA Type", options=["EMA","SMA","WMA","RMA","HMA","VWMA","TEMA"])
group2_src_fast = input.source(open, "Group 2 Fast Source")
group2_src_slow = input.source(open, "Group 2 Slow Source")
group2_len_fast = input.int(12, "Group 2 Fast MA Length", minval=1)
group2_len_slow = input.int(72, "Group 2 Slow MA Length", minval=1)

// === Вычисление MA ===
g1_fast = ma(group1_src_fast, group1_len_fast, group1_maType_fast)
g1_slow = ma(group1_src_slow, group1_len_slow, group1_maType_slow)
g2_fast = ma(group2_src_fast, group2_len_fast, group2_maType_fast)
g2_slow = ma(group2_src_slow, group2_len_slow, group2_maType_slow)

// === Фильтры направления ===
bullFilter1 = g1_fast > g1_slow
bullFilter2 = g2_fast > g2_slow
bearFilter1 = g1_fast < g1_slow
bearFilter2 = g2_fast < g2_slow
// === MACD ZERO LINE FILTERS (кэшированные EMA для скорости) ===
alpha(len) => 2 / (len + 1)

useMacdJ1  = input.bool(true,  "Use MACD J1 Filter")
useMacdJ2  = input.bool(true,  "Use MACD J2 Filter")
useMacdS11 = input.bool(false, "Use MACD S1_1 Filter")
useMacdS12 = input.bool(false, "Use MACD S1_2 Filter")

macd_fast_j1   = input.int(12,  "MACD Fast J1")
macd_slow_j1   = input.int(26,  "MACD Slow J1")
macd_fast_j2   = input.int(21,  "MACD Fast J2")
macd_slow_j2   = input.int(55,  "MACD Slow J2")
macd_fast_s1_1 = input.int(24,  "MACD Fast S1_1")
macd_slow_s1_1 = input.int(52,  "MACD Slow S1_1")
macd_fast_s1_2 = input.int(42,  "MACD Fast S1_2")
macd_slow_s1_2 = input.int(110, "MACD Slow S1_2")

// Вычисляем EMA как series (без var для избежания NA-ошибок)
ema_j1_fast  = ta.ema(close, macd_fast_j1)
ema_j1_slow  = ta.ema(close, macd_slow_j1)
ema_j2_fast  = ta.ema(close, macd_fast_j2)
ema_j2_slow  = ta.ema(close, macd_slow_j2)
ema_s11_fast = ta.ema(close, macd_fast_s1_1)
ema_s11_slow = ta.ema(close, macd_slow_s1_1)
ema_s12_fast = ta.ema(close, macd_fast_s1_2)
ema_s12_slow = ta.ema(close, macd_slow_s1_2)

macd_j1   = (0 + (1 - alpha(macd_slow_j1)) * nz(ema_j1_slow[1]) - (1 - alpha(macd_fast_j1)) * nz(ema_j1_fast[1])) / (alpha(macd_fast_j1) - alpha(macd_slow_j1))
macd_j2   = (0 + (1 - alpha(macd_slow_j2)) * nz(ema_j2_slow[1]) - (1 - alpha(macd_fast_j2)) * nz(ema_j2_fast[1])) / (alpha(macd_fast_j2) - alpha(macd_slow_j2))
macd_s1_1 = (0 + (1 - alpha(macd_slow_s1_1)) * nz(ema_s11_slow[1]) - (1 - alpha(macd_fast_s1_1)) * nz(ema_s11_fast[1])) / (alpha(macd_fast_s1_1) - alpha(macd_slow_s1_1))
macd_s1_2 = (0 + (1 - alpha(macd_slow_s1_2)) * nz(ema_s12_slow[1]) - (1 - alpha(macd_fast_s1_2)) * nz(ema_s12_fast[1])) / (alpha(macd_fast_s1_2) - alpha(macd_slow_s1_2))

macdFilterPassLong  = (not useMacdJ1 or close > macd_j1) and (not useMacdJ2 or close > macd_j2) and (not useMacdS11 or close > macd_s1_1) and (not useMacdS12 or close > macd_s1_2)
macdFilterPassShort = (not useMacdJ1 or close < macd_j1) and (not useMacdJ2 or close < macd_j2) and (not useMacdS11 or close < macd_s1_1) and (not useMacdS12 or close < macd_s1_2)

// === Фильтр времени ===
enableTimeFilter = input.bool(true, "Отключать стратегию на выходные")
friDisableHour   = input.int(16, "Начало отключения (Пятница, час)", minval=0, maxval=23)
sunEnableHour    = input.int(16, "Конец отключения (Воскресенье, час)", minval=0, maxval=23)

day = dayofweek(time)
h = hour(time)
m = minute(time)

inDisabledTime = enableTimeFilter and (
     (day == dayofweek.friday and h >= friDisableHour) or
     (day == dayofweek.saturday) or
     (day == dayofweek.sunday and h < sunEnableHour))

bgcolor(inDisabledTime ? color.new(color.black, 85) : na, title="Неактивный период")

if inDisabledTime
    if day == dayofweek.friday and h == friDisableHour and m == 0
        line.new(bar_index, low, bar_index, high, color=color.black, style=line.style_dotted, width=2)
    if day == dayofweek.sunday and h == sunEnableHour and m == 0
        line.new(bar_index, low, bar_index, high, color=color.black, style=line.style_dotted, width=2)

// === Пауза после выхода ===
var int barsSinceExit = 999
barsSinceExit := strategy.position_size == 0 ? nz(barsSinceExit[1]) + 1 : 0
minBarsPause = input.int(3, "Минимальная пауза после выхода (бары)")
canTrade = barsSinceExit > minBarsPause

// Фон жёлтой паузы
pauseActive = not canTrade and strategy.position_size == 0
bgcolor(pauseActive ? color.new(color.yellow,70) : na, title="Pause Background")

// === Фон фильтров ===
bgColor = color.new(color.gray, 85)
if bullFilter1 and bullFilter2 and macdFilterPassLong
    bgColor := color.new(color.green, 85)
if bearFilter1 and bearFilter2 and macdFilterPassShort
    bgColor := color.new(color.red, 85)
bgcolor(bgColor, title="Filter Background")

// === Условия входа/выхода с учётом времени ===
var bool justClosedLong = false
var bool justClosedShort = false
longCondition  = bullFilter1 and bullFilter2 and macdFilterPassLong and strategy.position_size == 0 and not inDisabledTime and not justClosedLong and canTrade

shortCondition = bearFilter1 and bearFilter2 and macdFilterPassShort and strategy.position_size == 0 and not inDisabledTime and not justClosedShort and canTrade

baseExitLong  = ((not bullFilter1 or not bullFilter2) or not macdFilterPassLong or inDisabledTime) and strategy.position_size > 0
baseExitShort = ((not bearFilter1 or not bearFilter2) or not macdFilterPassShort or inDisabledTime) and strategy.position_size < 0

// === Настройки стопа ===
useBarStop   = input.bool(true, "Включить стоп по экстремуму бара")
stopOffset   = input.float(0.0, "Оффсет стопа (в пунктах)", step=0.1)
var float longStopLine  = na
var float shortStopLine = na

// === Настройки безубытка ===
useBreakeven = input.bool(true, "Включить перенос стопа в безубыток")
offset_percent = input.float(0.3, "Сдвиг BE в % от цены (для покрытия комиссии)", minval=0, step=0.01) / 100

// === Настройки остановки пирамидинга после частичного закрытия ===
stopPyramidingAfterPartial = input.bool(true, "Остановить пирамидинг после частичного закрытия на стопе")

var bool partialCloseOccurred = false

var float trailingLongStop = na
var float trailingShortStop = na

// === Переменные для входов ===
var float longEntryPrice    = na
var float shortEntryPrice   = na
var float longBreakevenTrig = na
var float shortBreakevenTrig= na

var float longP0Entry = na
var float shortP0Entry = na

var float longInitialRisk = na
var float shortInitialRisk = na

var bool longP0Open = false
var bool longP1Open = false
var bool longP2Open = false
var bool longP3Open = false
var bool longP4Open = false
var bool longP5Open = false
var bool longP6Open = false
var bool longP7Open = false
var bool longP8Open = false
var bool longP9Open = false
var bool longP10Open = false

var bool shortP0Open = false
var bool shortP1Open = false
var bool shortP2Open = false
var bool shortP3Open = false
var bool shortP4Open = false
var bool shortP5Open = false
var bool shortP6Open = false
var bool shortP7Open = false
var bool shortP8Open = false
var bool shortP9Open = false
var bool shortP10Open = false

var float longP0Size = na
var float longP1Size = na
var float longP2Size = na
var float longP3Size = na
var float longP4Size = na
var float longP5Size = na
var float longP6Size = na
var float longP7Size = na
var float longP8Size = na
var float longP9Size = na
var float longP10Size = na

var float shortP0Size = na
var float shortP1Size = na
var float shortP2Size = na
var float shortP3Size = na
var float shortP4Size = na
var float shortP5Size = na
var float shortP6Size = na
var float shortP7Size = na
var float shortP8Size = na
var float shortP9Size = na
var float shortP10Size = na

var float longP0EntryPrice = na
var float longP1EntryPrice = na
var float longP2EntryPrice = na
var float longP3EntryPrice = na
var float longP4EntryPrice = na
var float longP5EntryPrice = na
var float longP6EntryPrice = na
var float longP7EntryPrice = na
var float longP8EntryPrice = na
var float longP9EntryPrice = na
var float longP10EntryPrice = na

var float shortP0EntryPrice = na
var float shortP1EntryPrice = na
var float shortP2EntryPrice = na
var float shortP3EntryPrice = na
var float shortP4EntryPrice = na
var float shortP5EntryPrice = na
var float shortP6EntryPrice = na
var float shortP7EntryPrice = na
var float shortP8EntryPrice = na
var float shortP9EntryPrice = na
var float shortP10EntryPrice = na

var bool long_be_active = false
var bool short_be_active = false

// === Переменные для гипотетического P&L ===
var float intendedExitPrice = na
var float savedAvgPrice = na
var float savedPositionSize = na
var float hypNetProfit = 0.0
var float lastLongStopLevel = na
var float lastShortStopLevel = na

// Update open flags based on current open trades
if strategy.position_size > 0
    longP0Open := false
    longP1Open := false
    longP2Open := false
    longP3Open := false
    longP4Open := false
    longP5Open := false
    longP6Open := false
    longP7Open := false
    longP8Open := false
    longP9Open := false
    longP10Open := false
    for i = 0 to strategy.opentrades - 1
        eid = strategy.opentrades.entry_id(i)
        if str.contains(eid, "Long P")
            lev_str = str.substring(eid, 6, str.length(eid))
            lev = int(str.tonumber(lev_str))
            switch lev
                0 => longP0Open := true
                1 => longP1Open := true
                2 => longP2Open := true
                3 => longP3Open := true
                4 => longP4Open := true
                5 => longP5Open := true
                6 => longP6Open := true
                7 => longP7Open := true
                8 => longP8Open := true
                9 => longP9Open := true
                10 => longP10Open := true

if strategy.position_size < 0
    shortP0Open := false
    shortP1Open := false
    shortP2Open := false
    shortP3Open := false
    shortP4Open := false
    shortP5Open := false
    shortP6Open := false
    shortP7Open := false
    shortP8Open := false
    shortP9Open := false
    shortP10Open := false
    for i = 0 to strategy.opentrades - 1
        eid = strategy.opentrades.entry_id(i)
        if str.contains(eid, "Short P")
            lev_str = str.substring(eid, 7, str.length(eid))
            lev = int(str.tonumber(lev_str))
            switch lev
                0 => shortP0Open := true
                1 => shortP1Open := true
                2 => shortP2Open := true
                3 => shortP3Open := true
                4 => shortP4Open := true
                5 => shortP5Open := true
                6 => shortP6Open := true
                7 => shortP7Open := true
                8 => shortP8Open := true
                9 => shortP9Open := true
                10 => shortP10Open := true

// === Детекция частичного закрытия ===
if stopPyramidingAfterPartial and strategy.position_size != 0 and math.abs(strategy.position_size) < math.abs(strategy.position_size[1])
    partialCloseOccurred := true

// === Calculate weighted average entry ===
float weighted_long_avg = na
if strategy.position_size > 0
    float ts = 0.0
    float tv = 0.0
    if longP0Open
        ts += longP0Size
        tv += longP0Size * longP0EntryPrice
    if longP1Open
        ts += longP1Size
        tv += longP1Size * longP1EntryPrice
    if longP2Open
        ts += longP2Size
        tv += longP2Size * longP2EntryPrice
    if longP3Open
        ts += longP3Size
        tv += longP3Size * longP3EntryPrice
    if longP4Open
        ts += longP4Size
        tv += longP4Size * longP4EntryPrice
    if longP5Open
        ts += longP5Size
        tv += longP5Size * longP5EntryPrice
    if longP6Open
        ts += longP6Size
        tv += longP6Size * longP6EntryPrice
    if longP7Open
        ts += longP7Size
        tv += longP7Size * longP7EntryPrice
    if longP8Open
        ts += longP8Size
        tv += longP8Size * longP8EntryPrice
    if longP9Open
        ts += longP9Size
        tv += longP9Size * longP9EntryPrice
    if longP10Open
        ts += longP10Size
        tv += longP10Size * longP10EntryPrice
    weighted_long_avg := ts > 0 ? tv / ts : na

float weighted_short_avg = na
if strategy.position_size < 0
    float ts = 0.0
    float tv = 0.0
    if shortP0Open
        ts += shortP0Size
        tv += shortP0Size * shortP0EntryPrice
    if shortP1Open
        ts += shortP1Size
        tv += shortP1Size * shortP1EntryPrice
    if shortP2Open
        ts += shortP2Size
        tv += shortP2Size * shortP2EntryPrice
    if shortP3Open
        ts += shortP3Size
        tv += shortP3Size * shortP3EntryPrice
    if shortP4Open
        ts += shortP4Size
        tv += shortP4Size * shortP4EntryPrice
    if shortP5Open
        ts += shortP5Size
        tv += shortP5Size * shortP5EntryPrice
    if shortP6Open
        ts += shortP6Size
        tv += shortP6Size * shortP6EntryPrice
    if shortP7Open
        ts += shortP7Size
        tv += shortP7Size * shortP7EntryPrice
    if shortP8Open
        ts += shortP8Size
        tv += shortP8Size * shortP8EntryPrice
    if shortP9Open
        ts += shortP9Size
        tv += shortP9Size * shortP9EntryPrice
    if shortP10Open
        ts += shortP10Size
        tv += shortP10Size * shortP10EntryPrice
    weighted_short_avg := ts > 0 ? tv / ts : na

float avg_entry = na
avg_entry := strategy.position_size > 0 ? weighted_long_avg : strategy.position_size < 0 ? weighted_short_avg : na

// === Вход в лонг ===
if longCondition
    if useBarStop
        longStopLine := low - stopOffset
    longInitialRisk := close - longStopLine
    long_qty = (baseLongQty / 100.0) * strategy.equity / close
    strategy.entry("Long P0", strategy.long, qty=long_qty)
    longP0Entry := close
    longP0Size := long_qty
    longP0EntryPrice := close
    longEntryPrice := close
    longBreakevenTrig := close + longInitialRisk
    partialCloseOccurred := false
    trailingLongStop := longStopLine
    long_be_active := false

if shortCondition
    if useBarStop
        shortStopLine := high + stopOffset
    shortInitialRisk := shortStopLine - close
    short_qty = (baseShortQty / 100.0) * strategy.equity / close
    strategy.entry("Short P0", strategy.short, qty=short_qty)
    shortP0Entry := close
    shortP0Size := short_qty
    shortP0EntryPrice := close
    shortEntryPrice := close
    shortBreakevenTrig := close - shortInitialRisk
    partialCloseOccurred := false
    trailingShortStop := shortStopLine
    short_be_active := false

// Сброс флагов после паузы
if barsSinceExit > minBarsPause
    justClosedLong := false
    justClosedShort := false


// === Безубыток для базовой позиции ===
if useBreakeven and strategy.position_size > 0 and longP0Open and not long_be_active and close >= longBreakevenTrig
    long_be_active := true

if useBreakeven and strategy.position_size < 0 and shortP0Open and not short_be_active and close <= shortBreakevenTrig
    short_be_active := true

// === ЛОНГ ПИРАМИДКИ ===
allowFurtherPyramid = not stopPyramidingAfterPartial or not partialCloseOccurred
if strategy.position_size > 0 and not na(longP0Entry) and allowFurtherPyramid and not baseExitLong
    step = longInitialRisk
    for int level = 2 to 11
        float level_k = longP0Entry + level * step
        pyramid_num = level - 1
        bool is_open = switch pyramid_num
            1 => longP1Open
            2 => longP2Open
            3 => longP3Open
            4 => longP4Open
            5 => longP5Open
            6 => longP6Open
            7 => longP7Open
            8 => longP8Open
            9 => longP9Open
            10 => longP10Open
            => false
        if close >= level_k and not is_open
            string entry_id = "Long P" + str.tostring(pyramid_num)
            pyramid_qty_percent = switch pyramid_num
                1 => longP1Qty
                2 => longP2Qty
                3 => longP3Qty
                4 => longP4Qty
                5 => longP5Qty
                6 => longP6Qty
                7 => longP7Qty
                8 => longP8Qty
                9 => longP9Qty
                10 => longP10Qty
                => 10.0
            pyramid_qty = (pyramid_qty_percent / 100.0) * strategy.equity / close
            strategy.entry(entry_id, strategy.long, qty=pyramid_qty)
            // Update vars for new
            switch pyramid_num
                1 => 
                    longP1EntryPrice := close
                    longP1Size := pyramid_qty
                2 => 
                    longP2EntryPrice := close
                    longP2Size := pyramid_qty
                3 => 
                    longP3EntryPrice := close
                    longP3Size := pyramid_qty
                4 => 
                    longP4EntryPrice := close
                    longP4Size := pyramid_qty
                5 => 
                    longP5EntryPrice := close
                    longP5Size := pyramid_qty
                6 => 
                    longP6EntryPrice := close
                    longP6Size := pyramid_qty
                7 => 
                    longP7EntryPrice := close
                    longP7Size := pyramid_qty
                8 => 
                    longP8EntryPrice := close
                    longP8Size := pyramid_qty
                9 => 
                    longP9EntryPrice := close
                    longP9Size := pyramid_qty
                10 => 
                    longP10EntryPrice := close
                    longP10Size := pyramid_qty

// === ШОРТ ПИРАМИДКИ ===
if strategy.position_size < 0 and not na(shortP0Entry) and allowFurtherPyramid and not baseExitShort
    step = shortInitialRisk
    for int level = 2 to 11
        float level_k = shortP0Entry - level * step
        pyramid_num = level - 1
        bool is_open = switch pyramid_num
            1 => shortP1Open
            2 => shortP2Open
            3 => shortP3Open
            4 => shortP4Open
            5 => shortP5Open
            6 => shortP6Open
            7 => shortP7Open
            8 => shortP8Open
            9 => shortP9Open
            10 => shortP10Open
            => false
        if close <= level_k and not is_open
            string entry_id = "Short P" + str.tostring(pyramid_num)
            pyramid_qty_percent = switch pyramid_num
                1 => shortP1Qty
                2 => shortP2Qty
                3 => shortP3Qty
                4 => shortP4Qty
                5 => shortP5Qty
                6 => shortP6Qty
                7 => shortP7Qty
                8 => shortP8Qty
                9 => shortP9Qty
                10 => shortP10Qty
                => 10.0
            pyramid_qty = (pyramid_qty_percent / 100.0) * strategy.equity / close
            strategy.entry(entry_id, strategy.short, qty=pyramid_qty)
            // Update vars for new
            switch pyramid_num
                1 => 
                    shortP1EntryPrice := close
                    shortP1Size := pyramid_qty
                2 => 
                    shortP2EntryPrice := close
                    shortP2Size := pyramid_qty
                3 => 
                    shortP3EntryPrice := close
                    shortP3Size := pyramid_qty
                4 => 
                    shortP4EntryPrice := close
                    shortP4Size := pyramid_qty
                5 => 
                    shortP5EntryPrice := close
                    shortP5Size := pyramid_qty
                6 => 
                    shortP6EntryPrice := close
                    shortP6Size := pyramid_qty
                7 => 
                    shortP7EntryPrice := close
                    shortP7Size := pyramid_qty
                8 => 
                    shortP8EntryPrice := close
                    shortP8Size := pyramid_qty
                9 => 
                    shortP9EntryPrice := close
                    shortP9Size := pyramid_qty
                10 => 
                    shortP10EntryPrice := close
                    shortP10Size := pyramid_qty

// Update trailing stops based on avg_entry - above for long, below for short
if useTrailingStop and strategy.position_size > 0 and long_be_active and not na(avg_entry)
    trailingLongStop := avg_entry * (1 + trailing_offset_percent)

if useTrailingStop and strategy.position_size > 0 and not long_be_active
    trailingLongStop := longStopLine

if useTrailingStop and strategy.position_size < 0 and short_be_active and not na(avg_entry)
    trailingShortStop := avg_entry * (1 - trailing_offset_percent)

if useTrailingStop and strategy.position_size < 0 and not short_be_active
    trailingShortStop := shortStopLine

trailingLongHit = useTrailingStop and strategy.position_size > 0 and low <= trailingLongStop
trailingShortHit = useTrailingStop and strategy.position_size < 0 and high >= trailingShortStop

beLongStop = long_be_active and not na(avg_entry) ? avg_entry * (1 + offset_percent) : longStopLine
beShortStop = short_be_active and not na(avg_entry) ? avg_entry * (1 - offset_percent) : shortStopLine

longStopLevel = useTrailingStop ? trailingLongStop : beLongStop
shortStopLevel = useTrailingStop ? trailingShortStop : beShortStop

longStopHit = strategy.position_size > 0 and low <= longStopLevel
shortStopHit = strategy.position_size < 0 and high >= shortStopLevel

globalExitLong = baseExitLong or longStopHit
globalExitShort = baseExitShort or shortStopHit

if globalExitLong
    intendedExitPrice := longStopHit ? longStopLevel : close
    lastLongStopLevel := longStopHit ? longStopLevel : avg_entry
    savedAvgPrice := avg_entry
    savedPositionSize := strategy.position_size
    strategy.close_all(longStopHit ? "Stop Hit Long All" : "Close Long All")
    justClosedLong := true

if globalExitShort
    intendedExitPrice := shortStopHit ? shortStopLevel : close
    lastShortStopLevel := shortStopHit ? shortStopLevel : avg_entry
    savedAvgPrice := avg_entry
    savedPositionSize := strategy.position_size
    strategy.close_all(shortStopHit ? "Stop Hit Short All" : "Close Short All")
    justClosedShort := true

// === Сброс при закрытии позиции ===
if strategy.position_size == 0 and strategy.position_size[1] != 0
    longP0Open := false
    longP1Open := false
    longP2Open := false
    longP3Open := false
    longP4Open := false
    longP5Open := false
    longP6Open := false
    longP7Open := false
    longP8Open := false
    longP9Open := false
    longP10Open := false
    shortP0Open := false
    shortP1Open := false
    shortP2Open := false
    shortP3Open := false
    shortP4Open := false
    shortP5Open := false
    shortP6Open := false
    shortP7Open := false
    shortP8Open := false
    shortP9Open := false
    shortP10Open := false
    partialCloseOccurred := false
    longInitialRisk := na
    shortInitialRisk := na
    longP0Size := na
    longP1Size := na
    longP2Size := na
    longP3Size := na
    longP4Size := na
    longP5Size := na
    longP6Size := na
    longP7Size := na
    longP8Size := na
    longP9Size := na
    longP10Size := na
    shortP0Size := na
    shortP1Size := na
    shortP2Size := na
    shortP3Size := na
    shortP4Size := na
    shortP5Size := na
    shortP6Size := na
    shortP7Size := na
    shortP8Size := na
    shortP9Size := na
    shortP10Size := na
    longP0EntryPrice := na
    longP1EntryPrice := na
    longP2EntryPrice := na
    longP3EntryPrice := na
    longP4EntryPrice := na
    longP5EntryPrice := na
    longP6EntryPrice := na
    longP7EntryPrice := na
    longP8EntryPrice := na
    longP9EntryPrice := na
    longP10EntryPrice := na
    shortP0EntryPrice := na
    shortP1EntryPrice := na
    shortP2EntryPrice := na
    shortP3EntryPrice := na
    shortP4EntryPrice := na
    shortP5EntryPrice := na
    shortP6EntryPrice := na
    shortP7EntryPrice := na
    shortP8EntryPrice := na
    shortP9EntryPrice := na
    shortP10EntryPrice := na
    longP0Entry := na
    shortP0Entry := na
    trailingLongStop := na
    trailingShortStop := na
    long_be_active := false
    short_be_active := false
    // Показываем P&L при закрытии
    if strategy.closedtrades > 0
        pnl = strategy.closedtrades.profit(strategy.closedtrades - 1)
        float display_pnl = na
        if not na(intendedExitPrice)
            if savedPositionSize > 0
                display_pnl := (intendedExitPrice - savedAvgPrice) * savedPositionSize
            else
                display_pnl := (savedAvgPrice - intendedExitPrice) * math.abs(savedPositionSize)
            intendedExitPrice := na
            savedAvgPrice := na
            savedPositionSize := na
        else
            display_pnl := pnl
        hypNetProfit += display_pnl
        y_pos = strategy.position_size[1] > 0 ? low : high
        style_label = strategy.position_size[1] > 0 ? label.style_label_up : label.style_label_down
        label.new(bar_index, y_pos, text=str.tostring(math.round(display_pnl)), style=style_label, color=display_pnl >= 0 ? color.green : color.red, textcolor=color.white, size=size.normal)

// === Чистка при выходе ===
if strategy.position_size[1] != 0 and strategy.position_size == 0
    longStopLine  := na
    shortStopLine := na
    longEntryPrice     := na
    shortEntryPrice    := na
    longBreakevenTrig  := na
    shortBreakevenTrig := na
    trailingLongStop := na
    trailingShortStop := na
    lastLongStopLevel := na
    lastShortStopLevel := na

// === Плоты MA, MACD и фонов ===
plot(g1_fast, title="G1 Fast", color=color.yellow, linewidth=2)
plot(g1_slow, title="G1 Slow", color=color.blue, linewidth=2)
plot(g2_fast, title="G2 Fast", color=color.orange, linewidth=2)
plot(g2_slow, title="G2 Slow", color=color.red, linewidth=2)

plot(macd_j1,   color=color.gray,   linewidth=1, title="MACD J1")
plot(macd_j2,   color=color.blue,   linewidth=1, title="MACD J2")
plot(macd_s1_1, color=color.orange, linewidth=1, title="MACD S1_1")
plot(macd_s1_2, color=color.red,    linewidth=1, title="MACD S1_2")
hline(0, "MACD Zero Line", color=color.red, linestyle=hline.style_dotted, linewidth=1)

// === Цвета баров по Group 1 Slow ===
color barColor = na
touching = high >= g1_slow and low <= g1_slow
if touching
    barColor := color.gray
else if close > g1_slow
    barColor := color.green
else if close < g1_slow
    barColor := color.red
barcolor(barColor)

// === Плот Average Entry ===
avgEntryPlot = showAvgBE and strategy.position_size != 0 ? avg_entry : na
plot(avgEntryPlot, title="Average Entry", color=color.aqua, linewidth=2, style=plot.style_stepline, trackprice=true)

// Stop line
float stop_line_plot = na
if strategy.position_size > 0
    stop_line_plot := showLongStop ? longStopLevel : na
else if strategy.position_size < 0
    stop_line_plot := showShortStop ? shortStopLevel : na
plot(stop_line_plot, title="Stop", color=color.red, style=plot.style_stepline, linewidth=2)


// === Визуал входа, стопа, BE, пирамид с учётом паузы ===
plot(showLongEntry  and strategy.position_size > 0 and not na(longEntryPrice)  and not pauseActive ? longEntryPrice  : na, title="Long Entry", color=color.blue, style=plot.style_stepline, linewidth=2)
plot(showShortEntry and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice : na, title="Short Entry", color=color.blue, style=plot.style_stepline, linewidth=2)
plot(showLongBE     and useBreakeven and strategy.position_size > 0 and not na(longBreakevenTrig)  and not pauseActive ? longBreakevenTrig : na, title="Long BE Trigger", color=color.purple, style=plot.style_stepline, linewidth=2)
plot(showShortBE    and useBreakeven and strategy.position_size < 0 and not na(shortBreakevenTrig) and not pauseActive ? shortBreakevenTrig : na, title="Short BE Trigger", color=color.purple, style=plot.style_stepline, linewidth=2)

pyramidGray = color.new(color.gray, 80)
plot(showLongP1 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 2 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 1", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP2 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 3 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 2", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP3 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 4 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 3", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP4 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 5 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 4", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP5 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 6 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 5", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP6 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 7 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 6", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP7 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 8 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 7", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP8 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 9 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 8", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP9 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 10 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 9", color=pyramidGray, style=plot.style_stepline, linewidth=2)
plot(showLongP10 and strategy.position_size > 0 and not na(longEntryPrice) and not pauseActive ? longEntryPrice + 11 * (longEntryPrice - longStopLine) : na, title="Long Pyramid 10", color=pyramidGray, style=plot.style_stepline, linewidth=2)

plot(showShortP1 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 2 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 1", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP2 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 3 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 2", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP3 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 4 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 3", color=pyramidGray, style=plot.style_linebr, linewidth=2)

plot(showShortP4 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 5 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 4", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP5 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 6 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 5", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP6 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 7 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 6", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP7 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 8 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 7", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP8 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 9 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 8", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP9 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 10 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 9", color=pyramidGray, style=plot.style_linebr, linewidth=2)
plot(showShortP10 and strategy.position_size < 0 and not na(shortEntryPrice) and not pauseActive ? shortEntryPrice - 11 * (shortStopLine - shortEntryPrice) : na, title="Short Pyramid 10", color=pyramidGray, style=plot.style_linebr, linewidth=2)

// === Таблица статистики ===
if barstate.islast
    var table statsTable = table.new(position.top_right, 2, 4, bgcolor=color.white, border_width=1)
    table.cell(statsTable, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(statsTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(statsTable, 0, 1, "Net Profit (Actual)", text_color=color.black)
    table.cell(statsTable, 1, 1, str.tostring(math.round(strategy.netprofit)), text_color=color.black)
    table.cell(statsTable, 0, 2, "Net Profit (Hyp)", text_color=color.black)
    table.cell(statsTable, 1, 2, str.tostring(math.round(hypNetProfit)), text_color=color.black)
    table.cell(statsTable, 0, 3, "Total Trades", text_color=color.black)
    table.cell(statsTable, 1, 3, str.tostring(strategy.closedtrades), text_color=color.black)

// === Желтый фон на паузе ===
bgcolor(pauseActive ? color.new(color.yellow, 70) : na, title="Pause Background")
