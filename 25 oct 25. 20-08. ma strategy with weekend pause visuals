//@version=5
strategy("MA with Fast Cross Filter - MA Trailing Stop + Cross Exit + Optional Donchian & MACD", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=1, initial_capital=10000)

// === Strategy Mode ===
modeGroup = "=== Strategy Mode ==="
use_ma_logic = input.bool(true, title="Use MA Logic (false for Bypass to Donchian Mode)", group=modeGroup)

// === Slow MA Параметры (бывшая основная MA) ===
slowGroup = "=== Slow MA (Main Signal) ==="
slow_length = input.int(20, title="Slow Length", minval=1, group=slowGroup)
slow_type = input.string("EMA", title="Slow Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=slowGroup)
slow_source = input.source(close, title="Slow Source", group=slowGroup)

// === Fast MA Параметры (Cross Filter) ===
fastGroup = "=== Fast MA (Cross Filter) ==="
fast_length = input.int(9, title="Fast Length", minval=1, group=fastGroup)
fast_type = input.string("EMA", title="Fast Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=fastGroup)
fast_source = input.source(close, title="Fast Source", group=fastGroup)

// === Filter MA Параметры ===
filterGroup = "=== Filter MA ==="
filter_length = input.int(50, title="Filter Length", minval=1, group=filterGroup)
filter_type = input.string("SMA", title="Filter Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=filterGroup)
filter_source = input.source(close, title="Filter Source", group=filterGroup)

// === Additional Filter MAs ===
addFilterGroup = "=== Additional Filter MAs ==="
use_filter2 = input.bool(false, "Use Filter MA 2?", group=addFilterGroup)
filter_length2 = input.int(100, title="Filter 2 Length", minval=1, group=addFilterGroup)
filter_type2 = input.string("SMA", title="Filter 2 Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=addFilterGroup)
filter_source2 = input.source(close, title="Filter 2 Source", group=addFilterGroup)

use_filter3 = input.bool(false, "Use Filter MA 3?", group=addFilterGroup)
filter_length3 = input.int(200, title="Filter 3 Length", minval=1, group=addFilterGroup)
filter_type3 = input.string("SMA", title="Filter 3 Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=addFilterGroup)
filter_source3 = input.source(close, title="Filter 3 Source", group=addFilterGroup)

use_filter4 = input.bool(false, "Use Filter MA 4?", group=addFilterGroup)
filter_length4 = input.int(300, title="Filter 4 Length", minval=1, group=addFilterGroup)
filter_type4 = input.string("SMA", title="Filter 4 Type", options=["SMA", "EMA", "WMA", "VWMA", "HMA", "DEMA", "TEMA", "TMA"], group=addFilterGroup)
filter_source4 = input.source(close, title="Filter 4 Source", group=addFilterGroup)

// === Trailing Stop Параметры ===
trailGroup = "=== Trailing Stop ==="
use_trailing = input.bool(true, title="Use MA Trailing Stop", group=trailGroup)
trail_offset = input.float(0.5, title="Trail Offset %", minval=0, step=0.01, group=trailGroup) / 100

// === Cross Exit Параметры ===
exitGroup = "=== Cross Exit ==="
use_cross_exit = input.bool(false, title="Use Cross Exit (Optional)", group=exitGroup)

// === Общие Параметры ===
commonGroup = "=== Common ==="
lookback = input.int(1, title="Lookback for Initial Stop", minval=1, group=commonGroup)

// === Weekend No-Trade Filter ===
weekendGroup = "=== Weekend Filter ==="
enableTimeFilter = input.bool(true, "Disable Trading on Weekends", group=weekendGroup)
friDisableHour   = input.int(16, "Friday Disable Hour (UTC)", minval=0, maxval=23, group=weekendGroup)
sunEnableHour    = input.int(16, "Sunday Enable Hour (UTC)", minval=0, maxval=23, group=weekendGroup)

// === Pause After Exit ===
pauseGroup = "=== Pause After Exit ==="
minBarsPause = input.int(3, "Min Bars Pause After Exit", minval=0, group=pauseGroup)

// === Donchian Filter Option ===
donchianGroup = "=== Donchian Filter (Optional) ==="
use_donchian = input.bool(false, title="Use Donchian Filter?", group=donchianGroup)

// Donchian Inputs (if used)
dcHigh  = input.int(20, "Donchian High (Main)", group=donchianGroup)
dcLow   = input.int(10, "Donchian Low (Main)", group=donchianGroup)
dcColor = input.color(color.blue, "DC Color (Main)", group=donchianGroup)
dcMidColor = input.color(color.blue, "DC Mid Color (Main)", group=donchianGroup)
useTightStops = input.bool(true, "Use Tighter Stops?", group=donchianGroup)
dcTightHigh = input.int(10, "Tight High", group=donchianGroup)
dcTightLow  = input.int(5, "Tight Low", group=donchianGroup)
dcTightColor = input.color(color.orange, "DC Tight Color", group=donchianGroup)

// Additional Donchian Channels (if used)
dcHigh2 = input.int(30, "Donchian High (Filter 1)", group=donchianGroup)
dcLow2  = input.int(15, "Donchian Low (Filter 1)", group=donchianGroup)
dcColor2 = input.color(color.purple, "DC Color (Filter 1)", group=donchianGroup)

dcHigh3 = input.int(40, "Donchian High (Filter 2)", group=donchianGroup)
dcLow3  = input.int(20, "Donchian Low (Filter 2)", group=donchianGroup)
dcColor3 = input.color(color.teal, "DC Color (Filter 2)", group=donchianGroup)

dcHigh4 = input.int(50, "Donchian High (Filter 3)", group=donchianGroup)
dcLow4  = input.int(25, "Donchian Low (Filter 3)", group=donchianGroup)
dcColor4 = input.color(color.yellow, "DC Color (Filter 3)", group=donchianGroup)

dcHigh5 = input.int(60, "Donchian High (Filter 4)", group=donchianGroup)
dcLow5  = input.int(30, "Donchian Low (Filter 4)", group=donchianGroup)
dcColor5 = input.color(color.orange, "DC Color (Filter 4)", group=donchianGroup)

dcHigh6 = input.int(70, "Donchian High (Filter 5)", group=donchianGroup)
dcLow6  = input.int(35, "Donchian Low (Filter 5)", group=donchianGroup)
dcColor6 = input.color(color.green, "DC Color (Filter 5)", group=donchianGroup)

// === MACD Filter Option ===
macdGroup = "=== MACD Filter (Optional) ==="
use_macd = input.bool(false, title="Use MACD Filter?", group=macdGroup)
use_macd_exit = input.bool(true, title="Use MACD as Exit (if filter on)?", group=macdGroup)
allowReentryMACD = input.bool(false, "Reentry after MACD exit?", group=macdGroup)

fast1 = input.int(12, "MACD Fast #1", group=macdGroup)
slow1 = input.int(26, "MACD Slow #1", group=macdGroup)
fast2 = input.int(20, "MACD Fast #2", group=macdGroup)
slow2 = input.int(50, "MACD Slow #2", group=macdGroup)

// Функция для расчета MA
f_ma(src, length, type) =>
    switch type
        "SMA" => ta.sma(src, length)
        "EMA" => ta.ema(src, length)
        "WMA" => ta.wma(src, length)
        "VWMA" => ta.vwma(src, length)
        "HMA" => ta.hma(src, length)
        "DEMA" => 2 * ta.ema(src, length) - ta.ema(ta.ema(src, length), length)
        "TEMA" => 3 * ta.ema(src, length) - 3 * ta.ema(ta.ema(src, length), length) + ta.ema(ta.ema(ta.ema(src, length), length), length)
        "TMA" => ta.sma(ta.sma(src, length), length)
        => na

// MACD Functions
alpha(len) => 2.0 / (len + 1.0)
macd_level(level, price, fast_len, slow_len) =>
    num = level + (1 - alpha(slow_len)) * ta.ema(price, slow_len)[1] - (1 - alpha(fast_len)) * ta.ema(price, fast_len)[1]
    den = alpha(fast_len) - alpha(slow_len)
    den != 0 ? num / den : na

// Расчет MA
slow_ma = f_ma(slow_source, slow_length, slow_type)
fast_ma = f_ma(fast_source, fast_length, fast_type)
filter_ma = f_ma(filter_source, filter_length, filter_type)
filter_ma2 = f_ma(filter_source2, filter_length2, filter_type2)
filter_ma3 = f_ma(filter_source3, filter_length3, filter_type3)
filter_ma4 = f_ma(filter_source4, filter_length4, filter_type4)

// === Donchian Calculations ===
dcUpper = ta.highest(high, dcHigh)
dcLower = ta.lowest(low, dcLow)
dcMid   = math.avg(dcUpper, dcLower)
dcTightUpper = ta.highest(high, dcTightHigh)
dcTightLower = ta.lowest(low, dcTightLow)

dcUpper2 = ta.highest(high, dcHigh2)
dcLower2 = ta.lowest(low, dcLow2)
dcUpper3 = ta.highest(high, dcHigh3)
dcLower3 = ta.lowest(low, dcLow3)
dcUpper4 = ta.highest(high, dcHigh4)
dcLower4 = ta.lowest(low, dcLow4)
dcUpper5 = ta.highest(high, dcHigh5)
dcLower5 = ta.lowest(low, dcLow5)
dcUpper6 = ta.highest(high, dcHigh6)
dcLower6 = ta.lowest(low, dcLow6)

// Use DC Logic
use_dc_logic = use_donchian or not use_ma_logic

// === Donchian Direction Logic ===
var bool dc1Up = false
var bool dc2Up = false
var bool dc3Up = false
var bool dc4Up = false
var bool dc5Up = false
var bool dc6Up = false

if use_dc_logic
    if ta.crossover(high, dcUpper[1])
        dc1Up := true
    if ta.crossunder(low, dcLower[1])
        dc1Up := false

    if ta.crossover(high, dcUpper2[1])
        dc2Up := true
    if ta.crossunder(low, dcLower2[1])
        dc2Up := false

    if ta.crossover(high, dcUpper3[1])
        dc3Up := true
    if ta.crossunder(low, dcLower3[1])
        dc3Up := false

    if ta.crossover(high, dcUpper4[1])
        dc4Up := true
    if ta.crossunder(low, dcLower4[1])
        dc4Up := false

    if ta.crossover(high, dcUpper5[1])
        dc5Up := true
    if ta.crossunder(low, dcLower5[1])
        dc5Up := false

    if ta.crossover(high, dcUpper6[1])
        dc6Up := true
    if ta.crossunder(low, dcLower6[1])
        dc6Up := false

donchian_long_filter = not use_dc_logic or (dc1Up and dc2Up and dc3Up and dc4Up and dc5Up and dc6Up)
donchian_short_filter = not use_dc_logic or (not dc1Up and not dc2Up and not dc3Up and not dc4Up and not dc5Up and not dc6Up)

// === MACD Filter ===
src_macd = close
zl1 = macd_level(0, src_macd, fast1, slow1)
zl2 = macd_level(0, src_macd, fast2, slow2)

allMacdAbove = not use_macd or (close > zl1 and close > zl2)
allMacdBelow = not use_macd or (close < zl1 and close < zl2)

// === Weekend Time Filter ===
day = dayofweek(time)
h = hour(time)
m = minute(time)

inDisabledTime = enableTimeFilter and (
     (day == dayofweek.friday and h >= friDisableHour) or
     (day == dayofweek.saturday) or
     (day == dayofweek.sunday and h < sunEnableHour))

// === Pause variables ===
var int barsSinceExit = 999
barsSinceExit := strategy.position_size == 0 ? nz(barsSinceExit[1]) + 1 : 0
canTrade = barsSinceExit > minBarsPause

// === Donchian Plots (conditional) ===
show_dc = use_donchian or not use_ma_logic
plot(show_dc ? dcUpper : na, "DC Upper", color=dcColor, linewidth=2)
plot(show_dc ? dcLower : na, "DC Lower", color=dcColor, linewidth=2)
plot(show_dc ? dcMid : na, "DC Mid", color=dcMidColor, linewidth=1)
plot(show_dc and useTightStops ? dcTightUpper : na, "DC Tight Upper", color=dcTightColor, linewidth=2)
plot(show_dc and useTightStops ? dcTightLower : na, "DC Tight Lower", color=dcTightColor, linewidth=2)
plot(show_dc ? dcUpper2 : na, "DC Upper 2", color=dcColor2, linewidth=1)
plot(show_dc ? dcLower2 : na, "DC Lower 2", color=dcColor2, linewidth=1)
plot(show_dc ? dcUpper3 : na, "DC Upper 3", color=dcColor3, linewidth=1)
plot(show_dc ? dcLower3 : na, "DC Lower 3", color=dcColor3, linewidth=1)
plot(show_dc ? dcUpper4 : na, "DC Upper 4", color=dcColor4, linewidth=1)
plot(show_dc ? dcLower4 : na, "DC Lower 4", color=dcColor4, linewidth=1)
plot(show_dc ? dcUpper5 : na, "DC Upper 5", color=dcColor5, linewidth=1)
plot(show_dc ? dcLower5 : na, "DC Lower 5", color=dcColor5, linewidth=1)
plot(show_dc ? dcUpper6 : na, "DC Upper 6", color=dcColor6, linewidth=1)
plot(show_dc ? dcLower6 : na, "DC Lower 6", color=dcColor6, linewidth=1)

// === MACD Plots (conditional) ===
plot(use_macd ? zl1 : na, "MACD ZeroLine 1", color=color.red, linewidth=2)
plot(use_macd ? zl2 : na, "MACD ZeroLine 2", color=color.blue, linewidth=2)

// === DC Activation Vars ===
var bool isLongActivated = false
var bool isShortActivated = false
var bool exitedByMACD = false

if not use_ma_logic
    if donchian_short_filter
        isShortActivated := true
        isLongActivated := false
    if donchian_long_filter
        isLongActivated := true
        isShortActivated := false

// Условия для свечей
bullish_prev = close[1] > open[1]  // Предыдущая свеча бычья
bearish_prev = close[1] < open[1]  // Предыдущая свеча медвежья

// MA base signals
ma_long_base = close > slow_ma and bullish_prev
ma_short_base = close < slow_ma and bearish_prev

// Cross Filter
cross_long_filter = fast_ma > slow_ma
cross_short_filter = fast_ma < slow_ma

// Filter MA
filter_long_allowed = close > filter_ma
filter_short_allowed = close < filter_ma
filter_long_allowed2 = not use_filter2 or close > filter_ma2
filter_short_allowed2 = not use_filter2 or close < filter_ma2
filter_long_allowed3 = not use_filter3 or close > filter_ma3
filter_short_allowed3 = not use_filter3 or close < filter_ma3
filter_long_allowed4 = not use_filter4 or close > filter_ma4
filter_short_allowed4 = not use_filter4 or close < filter_ma4

// MA filters
ma_long_filters = cross_long_filter and filter_long_allowed and filter_long_allowed2 and filter_long_allowed3 and filter_long_allowed4
ma_short_filters = cross_short_filter and filter_short_allowed and filter_short_allowed2 and filter_short_allowed3 and filter_short_allowed4

// MA conditions
long_ma_condition = ma_long_base and ma_long_filters and donchian_long_filter and allMacdAbove
short_ma_condition = ma_short_base and ma_short_filters and donchian_short_filter and allMacdBelow

// DC conditions
long_dc_condition = (isLongActivated or (allowReentryMACD and exitedByMACD)) and allMacdAbove
short_dc_condition = (isShortActivated or (allowReentryMACD and exitedByMACD)) and allMacdBelow

// Final conditions
long_condition = use_ma_logic ? long_ma_condition : long_dc_condition
short_condition = use_ma_logic ? short_ma_condition : short_dc_condition

// Cross Exit условия (MA only)
cross_exit_long = ta.crossunder(fast_ma, slow_ma)
cross_exit_short = ta.crossover(fast_ma, slow_ma)

// Экстремумы для начального стопа (MA only)
long_stop_level = ta.lowest(low[1], lookback)
short_stop_level = ta.highest(high[1], lookback)

// Переменные для trailing стопа (MA only)
var float trailing_long_stop = na
var float trailing_short_stop = na

// DC Stops
float longStop = na
float shortStop = na

// Entries
if long_condition and not inDisabledTime and canTrade
    if strategy.position_size < 0
        strategy.close("Short")
    strategy.entry("Long", strategy.long)
    exitedByMACD := false
    if use_ma_logic
        trailing_long_stop := long_stop_level
        strategy.exit("Stop Long", from_entry="Long", stop=trailing_long_stop)

if short_condition and not inDisabledTime and canTrade
    if strategy.position_size > 0
        strategy.close("Long")
    strategy.entry("Short", strategy.short)
    exitedByMACD := false
    if use_ma_logic
        trailing_short_stop := short_stop_level
        strategy.exit("Stop Short", from_entry="Short", stop=trailing_short_stop)

// MA Trailing Updates
if use_ma_logic and use_trailing and strategy.position_size > 0
    new_trail_stop = slow_ma * (1 - trail_offset)
    trailing_long_stop := math.max(nz(trailing_long_stop), new_trail_stop)
    strategy.exit("Stop Long", from_entry="Long", stop=trailing_long_stop)

if use_ma_logic and use_trailing and strategy.position_size < 0
    new_trail_stop = slow_ma * (1 + trail_offset)
    trailing_short_stop := math.min(nz(trailing_short_stop), new_trail_stop)
    strategy.exit("Stop Short", from_entry="Short", stop=trailing_short_stop)

// MA Cross Exits
if use_cross_exit and use_ma_logic
    if strategy.position_size > 0 and cross_exit_long
        strategy.close("Long", comment="Cross Exit Long")
    if strategy.position_size < 0 and cross_exit_short
        strategy.close("Short", comment="Cross Exit Short")

// MA MACD Exits
if use_ma_logic and use_macd and use_macd_exit
    macd_long_exit = ta.crossunder(close, zl1) or ta.crossunder(close, zl2)
    macd_short_exit = ta.crossover(close, zl1) or ta.crossover(close, zl2)
    if strategy.position_size > 0 and macd_long_exit
        strategy.close("Long", comment="MACD Exit Long")
        exitedByMACD := true
    if strategy.position_size < 0 and macd_short_exit
        strategy.close("Short", comment="MACD Exit Short")
        exitedByMACD := true

// Weekend and Pause Exits
if inDisabledTime
    if strategy.position_size > 0
        strategy.close("Long", comment="Weekend Exit Long")
    if strategy.position_size < 0
        strategy.close("Short", comment="Weekend Exit Short")

// DC Dynamic Stops and Exits
if not use_ma_logic
    inLongPosition = strategy.position_size > 0
    inShortPosition = strategy.position_size < 0
    inLongProfit = inLongPosition and strategy.position_avg_price <= dcTightLower
    inShortProfit = inShortPosition and strategy.position_avg_price >= dcTightUpper

    longStopLevel = inLongPosition ? (inLongProfit ? dcLower : dcTightLower) : na
    shortStopLevel = inShortPosition ? (inShortProfit ? dcUpper : dcTightUpper) : na
    longStop := useTightStops ? longStopLevel : (inLongPosition ? dcLower : na)
    shortStop := useTightStops ? shortStopLevel : (inShortPosition ? dcUpper : na)

    macd_long_exit = ta.crossunder(close, zl1) or ta.crossunder(close, zl2)
    macd_short_exit = ta.crossover(close, zl1) or ta.crossover(close, zl2)

    longExit = ta.crossunder(low, longStop[1]) or (use_macd and use_macd_exit and macd_long_exit)
    shortExit = ta.crossover(high, shortStop[1]) or (use_macd and use_macd_exit and macd_short_exit)

    if longExit
        strategy.close("Long")
        isLongActivated := false
        if use_macd and use_macd_exit and macd_long_exit
            exitedByMACD := true

    if shortExit
        strategy.close("Short")
        isShortActivated := false
        if use_macd and use_macd_exit and macd_short_exit
            exitedByMACD := true

// Отображение MA
plot(slow_ma, color=color.blue, title="Slow MA", linewidth=2)
plot(fast_ma, color=color.orange, title="Fast MA (Cross Filter)", linewidth=1)
plot(filter_ma, color=color.gray, title="Filter MA", linewidth=3)
plot(use_filter2 ? filter_ma2 : na, color=color.purple, title="Filter MA 2", linewidth=2)
plot(use_filter3 ? filter_ma3 : na, color=color.maroon, title="Filter MA 3", linewidth=2)
plot(use_filter4 ? filter_ma4 : na, color=color.navy, title="Filter MA 4", linewidth=2)

// Визуализация стопов
plot(use_ma_logic and strategy.position_size > 0 ? trailing_long_stop : not use_ma_logic and strategy.position_size > 0 ? longStop : na, color=color.red, style=plot.style_linebr, title="Long Stop", linewidth=2)
plot(use_ma_logic and strategy.position_size < 0 ? trailing_short_stop : not use_ma_logic and strategy.position_size < 0 ? shortStop : na, color=color.green, style=plot.style_linebr, title="Short Stop", linewidth=2)

// Логика покраски фона
default_bg = show_dc ? (donchian_long_filter ? color.new(color.green, 90) : donchian_short_filter ? color.new(color.red, 90) : color.new(color.gray, 90)) : (strategy.position_size > 0 ? color.new(color.green, 90) : strategy.position_size < 0 ? color.new(color.red, 90) : color.new(color.gray, 90))
bg_color = inDisabledTime ? color.new(color.gray, 90) : (strategy.position_size == 0 and barsSinceExit <= minBarsPause ? color.new(color.yellow, 90) : default_bg)
bgcolor(bg_color)

// Bar Coloring
bar_color = if use_ma_logic
    if low > filter_ma
        color.new(color.green, 0)
    else if high < filter_ma
        color.new(color.red, 0)
    else
        color.new(color.gray, 0)
else
    if low > dcMid
        color.new(color.green, 0)
    else if high < dcMid
        color.new(color.red, 0)
    else
        color.new(color.gray, 0)
barcolor(bar_color)
